input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(0, 1), wMatrix)
input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(1, 0), wMatrix)
input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(1, 1), wMatrix)
input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(0, 1), wMatrix)
input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(0, 0), wMatrix)
input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(0, 1), wMatrix)
input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(1, 0), wMatrix)
input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(1, 1), wMatrix)
# Hebian Neural Network implementation
# @author: Geymerson Ramos
# email: <geymerson@ic.ufal.br>
# Return a weight matrix
fweightMatrix <- function(inp, out) {
inpVar <- inp
outVar <- out
vect <- 0
for(i in 1:nrow(inpVar)) {
inpVarRow <- inpVar[i, ]
outVarRow <- outVar[i, ]
vect <- vect +  inpVarRow %*% t(outVarRow)
}
return(vect)
}
hebbianLearning <- function(vIn, weightMatrix) {
result <- 0
for(i in 1: ncol(weightMatrix)) {
sumValue = 0
weights <- weightMatrix[, i]
print(weights)
for(j in 1:length(weights)) {
sumValue = sumValue + vIn[j] * weights[j]
}
if(sumValue > 0) {
result[i] = 0
}
else {
result[i] = 1
}
}
return(result)
}
##### The code below is an usage example
#   x1 x2  output'
#    0  0    1
#    0  1    0
#    1  0    0
#    1  1    1
# t1 = (0, 0)   output = 1
# t2 = (0, 1)   output = 0
# t3 = (1, 0)   output = 0
# t4 = (1, 1)   output = 1
input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(1, 1), wMatrix)
# s1 = (1, 0, 0, 0)   output = 1 0
# s2 = (1, 1, 0, 0)   output = 1 0
# s3 = (0, 0, 0, 1)   output = 0 1
# s4 = (0, 0, 1, 1)   output = 0 1
input <- matrix( c(1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1), nrow = 4, ncol = 4)
output <- matrix( c(1, 1, 0, 0, 0, 0, 1, 1), nrow = 4, ncol = 2 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(0, 0, 1, 1), wMatrix)
input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(1, 1), wMatrix)
input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(0, 1), wMatrix)
input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(0, 0), wMatrix)
input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(1, 0), wMatrix)
# Hebian Neural Network implementation
# @author: Geymerson Ramos
# email: <geymerson@ic.ufal.br>
# Return a weight matrix
fweightMatrix <- function(inp, out) {
inpVar <- inp
outVar <- out
vect <- 0
for(i in 1:nrow(inpVar)) {
inpVarRow <- inpVar[i, ]
outVarRow <- outVar[i, ]
vect <- vect +  inpVarRow %*% t(outVarRow)
}
return(vect)
}
hebbianLearning <- function(vIn, weightMatrix) {
result <- 0
for(i in 1: ncol(weightMatrix)) {
sumValue = 0
weights <- weightMatrix[, i]
print(weights)
for(j in 1:length(weights)) {
sumValue = sumValue + vIn[j] * weights[j]
}
if(sumValue > 0) {
result[i] = 1
}
else {
result[i] = 0
}
}
return(result)
}
##### The code below is an usage example
#   x1 x2  output'
#    0  0    1
#    0  1    0
#    1  0    0
#    1  1    1
# t1 = (0, 0)   output = 1
# t2 = (0, 1)   output = 0
# t3 = (1, 0)   output = 0
# t4 = (1, 1)   output = 1
input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(1, 0), wMatrix)
# s1 = (1, 0, 0, 0)   output = 1 0
# s2 = (1, 1, 0, 0)   output = 1 0
# s3 = (0, 0, 0, 1)   output = 0 1
# s4 = (0, 0, 1, 1)   output = 0 1
input <- matrix( c(1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1), nrow = 4, ncol = 4)
output <- matrix( c(1, 1, 0, 0, 0, 0, 1, 1), nrow = 4, ncol = 2 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(0, 0, 1, 1), wMatrix)
input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(1, 0), wMatrix)
input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(0, 0), wMatrix)
input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(0, 0), wMatrix)
hebbianLearning <- function(vIn, weightMatrix) {
vOut <- 0
for(i in 1: ncol(weightMatrix)) {
sumValue = 0
weights <- weightMatrix[, i]
print(weights)
for(j in 1:length(weights)) {
sumValue = sumValue + vIn[j] * weights[j]
}
if(sumValue > 0) {
vOut[i] = 1
}
else {
vOut[i] = 0
}
}
return(vOut)
}
# Hebian Neural Network implementation
# @author: Geymerson Ramos
# email: <geymerson@ic.ufal.br>
# Return a weight matrix
fweightMatrix <- function(inp, out) {
inpVar <- inp
outVar <- out
vect <- 0
for(i in 1:nrow(inpVar)) {
inpVarRow <- inpVar[i, ]
outVarRow <- outVar[i, ]
vect <- vect +  inpVarRow %*% t(outVarRow)
}
return(vect)
}
hebbianLearning <- function(vIn, weightMatrix) {
vOut <- 0
for(i in 1: ncol(weightMatrix)) {
sumValue = 0
weights <- weightMatrix[, i]
print(weights)
for(j in 1:length(weights)) {
sumValue = sumValue + vIn[j] * weights[j]
}
if(sumValue %% 2 == 0) {
vOut[i] = 1
}
else {
vOut[i] = 0
}
}
return(vOut)
}
##### The code below is an usage example
#   x1 x2  output'
#    0  0    1
#    0  1    0
#    1  0    0
#    1  1    1
# t1 = (0, 0)   output = 1
# t2 = (0, 1)   output = 0
# t3 = (1, 0)   output = 0
# t4 = (1, 1)   output = 1
input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(0, 0), wMatrix)
# s1 = (1, 0, 0, 0)   output = 1 0
# s2 = (1, 1, 0, 0)   output = 1 0
# s3 = (0, 0, 0, 1)   output = 0 1
# s4 = (0, 0, 1, 1)   output = 0 1
input <- matrix( c(1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1), nrow = 4, ncol = 4)
output <- matrix( c(1, 1, 0, 0, 0, 0, 1, 1), nrow = 4, ncol = 2 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(0, 0, 1, 1), wMatrix)
input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(0, 0), wMatrix)
input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(1, 0), wMatrix)
input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(0, 1), wMatrix)
input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(1, 1), wMatrix)
# Hebian Neural Network implementation
# @author: Geymerson Ramos
# email: <geymerson@ic.ufal.br>
# Return a weight matrix
fweightMatrix <- function(inp, out) {
inpVar <- inp
outVar <- out
vect <- 0
for(i in 1:nrow(inpVar)) {
inpVarRow <- inpVar[i, ]
outVarRow <- outVar[i, ]
vect <- vect +  inpVarRow %*% t(outVarRow)
}
return(vect)
}
hebbianLearning <- function(vIn, weightMatrix) {
vOut <- 0
for(i in 1: ncol(weightMatrix)) {
sumValue = 0
weights <- weightMatrix[, i]
print(weights)
for(j in 1:length(weights)) {
sumValue = sumValue + vIn[j] * weights[j]
}
if(sumValue %% 2 == 0) {
vOut[i] = 1
}
else {
vOut[i] = 0
}
}
return(vOut)
}
##### The code below is an usage example
#   x1 x2  output'
#    0  0    1
#    0  1    0
#    1  0    0
#    1  1    1
# t1 = (0, 0)   output = 1
# t2 = (0, 1)   output = 0
# t3 = (1, 0)   output = 0
# t4 = (1, 1)   output = 1
input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(1, 1), wMatrix)
# The code below uses the activation
# activation funcion f(x) = 1 if x > 0
# and f(x) = 0 otherwise. If you're
# going to use make sure to change it
# in the hebbianLearning function
# s1 = (1, 0, 0, 0)   output = 1 0
# s2 = (1, 1, 0, 0)   output = 1 0
# s3 = (0, 0, 0, 1)   output = 0 1
# s4 = (0, 0, 1, 1)   output = 0 1
#input <- matrix( c(1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1), nrow = 4, ncol = 4)
#output <- matrix( c(1, 1, 0, 0, 0, 0, 1, 1), nrow = 4, ncol = 2 )
#wMatrix <- fweightMatrix(input, output)
#hebbianLearning(c(0, 0, 1, 1), wMatrix)
input <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
output <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(input, output)
hebbianLearning(c(0, 1), wMatrix)
trainningInput <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
trainningOutput <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(trainningInput, trainningOutput)
hebbianLearning(c(0, 1), wMatrix)
# Hebian Neural Network implementation
# @author: Geymerson Ramos
# email: <geymerson@ic.ufal.br>
# Return a weight matrix
fweightMatrix <- function(inp, out) {
inpVar <- inp
outVar <- out
vect <- 0
for(i in 1:nrow(inpVar)) {
inpVarRow <- inpVar[i, ]
outVarRow <- outVar[i, ]
vect <- vect +  inpVarRow %*% t(outVarRow)
}
return(vect)
}
# Hebian learning function
hebbianLearning <- function(vIn, weightMatrix) {
vOut <- 0
for(i in 1: ncol(weightMatrix)) {
sumValue = 0
weights <- weightMatrix[, i]
for(j in 1:length(weights)) {
sumValue = sumValue + vIn[j] * weights[j]
}
if(sumValue %% 2 == 0) {
vOut[i] = 1
}
else {
vOut[i] = 0
}
}
return(vOut)
}
##### The code below is an usage example
#   x1 x2  output'
#    0  0    1
#    0  1    0
#    1  0    0
#    1  1    1
# t1 = (0, 0)   output = 1
# t2 = (0, 1)   output = 0
# t3 = (1, 0)   output = 0
# t4 = (1, 1)   output = 1
trainningInput <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
trainningOutput <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(trainningInput, trainningOutput)
hebbianLearning(c(0, 1), wMatrix)
# The code below uses the activation
# funcion ||| f(x) = 1 if x > 0 ||||
# and ||| f(x) = 0 if x <= 0 |||.
# If you're going to execute the code
# s1 = (1, 0, 0, 0)   output = 1 0
# s2 = (1, 1, 0, 0)   output = 1 0
# s3 = (0, 0, 0, 1)   output = 0 1
# s4 = (0, 0, 1, 1)   output = 0 1
#input <- matrix( c(1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1), nrow = 4, ncol = 4)
#output <- matrix( c(1, 1, 0, 0, 0, 0, 1, 1), nrow = 4, ncol = 2 )
#wMatrix <- fweightMatrix(input, output)
#hebbianLearning(c(0, 0, 1, 1), wMatrix)
trainningInput <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
trainningOutput <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(trainningInput, trainningOutput)
hebbianLearning(c(0, 1), wMatrix)
trainningInput <- matrix( c(0, 0, 1, 1, 0, 1, 0, 1), nrow = 4, ncol = 2)
trainningOutput <- matrix( c(1, 0, 0, 1), nrow = 4, ncol = 1 )
wMatrix <- fweightMatrix(trainningInput, trainningOutput)
hebbianLearning(c(1, 1), wMatrix)
install.packages("readODS")
library(readODS)
install.packages("readODS")
library(readODS)
dat = read.csv("/home/geymerson/Documents/datasetReal.ods", header = TRUE)
View(dat)
install.packages("readODS")
library(readODS)
dat = read.csv("/home/geymerson/Documents/datasetReal.ods", sheet = 1,header = TRUE)
dat = read.csv("/home/geymerson/Documents/datasetReal.ods", sheet = 1,header = TRUE)
dat = read.ods("/home/geymerson/Documents/datasetReal.ods", header = TRUE)
dat = read_ods("/home/geymerson/Documents/datasetReal.ods", header = TRUE)
install.packages("readODS")
library(readODS)
dat = read_ods("/home/geymerson/Documents/datasetReal.ods", header = TRUE)
csv
dat = read.csv("/home/geymerson/Documents/dataSet1.csv", header = TRUE)
View(dat)
dat = read.csv("/home/geymerson/Documents/dataSet1.csv", header = TRUE)
View(dat)
dat = read.csv("/home/geymerson/Documents/dataSet1.csv", header = TRUE)
plot(dat)
dat = read.csv("/home/geymerson/Documents/dataSet1.csv", header = TRUE)
plot(dat, style = "l")
plot(dat, "l")
hist(dat, "l")
dat = read.csv("/home/geymerson/Documents/dataSet1.csv", header = TRUE)
hist(dat, "l")
dat = read.csv("/home/geymerson/Documents/dataSet1.csv", header = TRUE)
hist(dat, "l")
dat = read.csv("/home/geymerson/Documents/dataSet1.csv", header = TRUE)
hist(dat, "l")
dat = read.csv("/home/geymerson/Documents/dataSet1.csv", header = TRUE)
plot(dat, type = 'l')
dat = read.csv("/home/geymerson/Documents/dataSet1.csv", header = TRUE)
plot(dat, type = 'h')
dat = read.csv("/home/geymerson/Documents/dataSet1.csv", header = TRUE)
plot(dat, type = 's')
dat = read.csv("/home/geymerson/Documents/dataSet1.csv", header = TRUE)
plot(dat, type = 'S')
plot(dat, type = 'S')
dat = read.csv("/home/geymerson/Documents/dataSet1.csv", header = TRUE)
plot(dat, type = 'S')
dat = read.csv("/home/geymerson/Documents/dataSet1.csv", header = TRUE)
plot(dat, type = 'S')
dat = read.csv("/home/geymerson/Documents/dataSet1.csv", header = TRUE)
plot(dat, type = 'S')
plot(dat, type = 'S')
dat1 = read.csv("/home/geymerson/Documents/dataSet1.csv", header = TRUE)
dat2 = read.csv("/home/geymerson/Documents/dataSet1S.csv", header = TRUE)
#plot(dat1, type = 'S')
plot(dat2, type = 'S')
dat1 = read.csv("/home/geymerson/Documents/dataSet1.csv", header = TRUE)
dat2 = read.csv("/home/geymerson/Documents/dataSet1S.csv", header = TRUE)
#plot(dat1, type = 'S')
plot(dat2, type = 'S')
#data2 = read.csv("/home/geymerson/Documents/dataSet2.csv", header = TRUE)
data2S = read.csv("/home/geymerson/Documents/dataSet2S.csv", header = TRUE)
#plot(data2, type = 'S')
plot(data2S, type = 'S')
setwd("/home/geymerson/Documents/ecom_089_2017_1/classifierProject/rscript/")
#Get the input data path
rd <- read.table("../datasets/dataFilePath.txt", header = FALSE)
data <- read.csv(as.character(rd$V1))
# Load the trainning model
if(file.exists("../robjects/model_train.rda")) {
load("../robjects/model_train.rda")
} else {
print("The model could not be found.")
}
# Generate predictions based on the model
# and save prediction log
sink("../rlogs/prediction.log", append=FALSE, split=FALSE)
prediction <- predict(model_train, data)
prediction
#for(i in 1:length(prediction)) {
#  print(as.character(prediction[i]))
#}
setwd("/home/geymerson/Documents/ecom_089_2017_1/classifierProject/rscript/")
#Get the input data path
rd <- read.table("../datasets/dataFilePath.txt", header = FALSE)
data <- read.csv(as.character(rd$V1))
# Load the trainning model
if(file.exists("../robjects/model_train.rda")) {
load("../robjects/model_train.rda")
} else {
print("The model could not be found.")
}
# Generate predictions based on the model
# and save prediction log
sink("../rlogs/prediction.log", append=FALSE, split=FALSE)
prediction <- predict(model_train, data)
prediction
#for(i in 1:length(prediction)) {
#  print(as.character(prediction[i]))
#}
if(!require(OneR)){
install.packages("OneR")
library(OneR)
}
setwd("/home/geymerson/Documents/ecom_089_2017_1/classifierProject/rscript/")
#Get the input data path
rd <- read.table("../datasets/dataFilePath.txt", header = FALSE)
data <- read.csv(as.character(rd$V1))
# Load the trainning model
if(file.exists("../robjects/model_train.rda")) {
load("../robjects/model_train.rda")
} else {
print("The model could not be found.")
}
# Generate predictions based on the model
# and save prediction log
sink("../rlogs/prediction.log", append=FALSE, split=FALSE)
prediction <- predict(model_train, data)
prediction
#for(i in 1:length(prediction)) {
#  print(as.character(prediction[i]))
#}
